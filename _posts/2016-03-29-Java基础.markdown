---
layout: post
title: Java 基础
date: 2016-01-24
tags: Java
---
## 内部类
内部类可以直接调用外部类的私有属性
缺点：打乱类的结构
![](http://i2.piimg.com/50551ca56bd350c3.png)
_如果外部类和内部类具有相同的成员变量或方法，内部类默认访问自己的成员变量或方法，如果要访问外部类的成员变量，可以使用 this 关键字。_
![](http://i4.piimg.com/225dc3fef170e266.png)
**静态内部类**
![](http://i4.piimg.com/a24bd959a9e0c4b9.jpg)

## 代码块
**构造块**
 {% highlight java %}
public class DaiMaKuai01 {
	/**
	 * 构造块
	 */
	{
		System.out.println("通用构造块");
	}
	
	/**
	 * 构造方法一
	 */
	DaiMaKuai01(){
		System.out.println("构造方法一");
	}
	
	/**
	 * 构造方法二
	 * @param i
	 */
	DaiMaKuai01(int i){
		System.out.println("构造方法二");
	}
	
	public static void main(String[] args) {
		DaiMaKuai01 demo1 = new DaiMaKuai01();
		DaiMaKuai01 demo2 = new DaiMaKuai01(2);
	}
}
{% endhighlight %}

**静态代码块**
{% highlight java %}
public class DaiMaKuai02 {
	/**
	 * 构造块
	 */
	{
		System.out.println("构造代码块");
	}
	/**
	 * 静态代码块
	 */
	static{
		System.out.println("静态代码块");
	}
	
	/**
	 * 构造方法一
	 */
	DaiMaKuai02(){
		System.out.println("构造方法一");
	}
	
	/**
	 * 构造方法二
	 */
	DaiMaKuai02(int i){
		System.out.println("构造方法二");
	}
	
	public static void main(String[] args) {
		DaiMaKuai02 demo01 = new DaiMaKuai02();
		DaiMaKuai02 demo02 = new DaiMaKuai02(2);
	}
}
{% endhighlight%}
_调用构造方法的时候首先调用静态代码块且只调用一次，然后调用哦古着代码块，最后调用构造方法_
## 形参传递方法 ##
![](http://i3.piimg.com/dbabfe4b506d1ea9.png)

## 权限控制 ##
private（私有） get,set 方法
package（包访问权限）
protected（子类访问权限）
public（公共访问权限）

|          | private | package（默认的） | protected | public |
| -------- | ------- | --------------- | --------- | ------ |
| 同一类中 | √      | √                | √        | √     |
| 同一包中 |         | √                | √        | √     |
| 子类中   |         |                   |           | √     |
| 全局范围 |         |                   |           | √     |

## String类 ##
 1. 实例化方法
实例化一：String name1 = "张三";
实例化二：String name2 = new String("李四");
2. 比较方法
“=="，比较应用（指向的地址）；”equals方法"比较具体的内容
3. 两种实例化区别
直接赋值实例化：创建的对象存放到字符串的地址池中，加入存在则不会再创建
new对象方式：每次都创建一个新的对象
4. 字符串的类容具有不可改变性

## Java继承 ##
1. 继承定义和基本使用    关键字：extends
    定义：子类能继承父类的属性和方法
    注意：Java只能单继承
         私有方法不能继承
2. 方法的重写（override）
3. super关键字   

## Final关键字 ##
final修饰类，则该类不能被继承
final修饰方法，则该方法不能被子类重写
final修饰的变量，则该变量不能被修改，即变为常量

## 抽象类 ##
定义：含有抽象方法的类称为抽象类，不能生成对象（即不能被实例化）
注意：
1. 包含一个抽象方法的类是抽象类
2. 抽象类和抽象方法都要用abstract关键字声明
3. 抽象方法只要声明而不需要实现
4. 抽象类的子类必须重写（override）抽象类中的全部抽象方法
5. 抽象类不能被实例化

## 接口 ##
定义：一种特殊的抽象类，由全局变量和公共的抽象方法所组成
特性：
1. 一个类可以实现一个或多个接口
2. 先继承后实现
3. 接口可以多继承
4. 接口是隐式抽象的，当声明一个接口的时候，不必使用abstract关键字
5. 接口中每一个方法也是隐式抽象的，声明时同样不需要abstract关键字
6. 接口中的方法都是公有的